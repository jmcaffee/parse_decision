# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end


require 'rspec/given'
require_relative '../lib/parsedecision'
require 'pathname'

# To activate tracing, use the following example command line:
#
#   TRACE=on rspec spec
#
if ENV["TRACE"] == '1' || ENV["TRACE"] == 'on'
  puts '##'*20
  puts
  puts "ENV[TRACE] = on. Tracing activated"
  puts
  puts '##'*20

  # See http://www.blackbytes.info/2012/06/ruby-tracing/ for further details.
  set_trace_func proc { |event, file, line, id, binding, classname|
    # Limit output to plugin method calls.
    if event == 'call' && file.include?('parsedecision/plugin')
      #printf "%8s %s:%-2d %10s %8s\n", event, file, line, id, classname

      # Shorten the class name and filename strings by stripping of the prefixes.
      clsname = classname.to_s.sub!("ParseDecision::Plugin::", "")
      file.sub!("c:/Users/Jeff/ams/tools/ruby/parsedecision/lib/parsedecision/", "")

      printf "%28s %30s %s:%-2d\n", clsname, id, file, line
    end
  }
end


def file_to_array(filepath)
  dump = String.new
  File.open(filepath) do |f|
    f.each_line {|line| dump << line}
  end
  dump
end

  def create_context( _state=nil, _index=0 )
    ctx = ParseDecision::PDContext.new
    ctx.outdir = 'tmp/spec'
    ctx.state = _state
    _index.times { ctx.nextIndex() }
    ctx.verbose = true
    ctx
  end


